
==================== FINAL INTERFACE ====================
2018-11-07 17:12:05.962962 UTC

interface main@main:Main 8002
  interface hash: f4ba264f19da7651f65adf88f37e926b
  ABI hash: 94812655fa37100445371bb2132f2d39
  export-list hash: 306e8695e099631c134d09c66a0e3c5f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: dfc0ae570e6cdc1d6609072e91243ea9
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.readData
  Main.toInstruction
  Main.BoolNum{Main.One Main.Zero}
  Main.Instruction{Main.Instruction getDirtyBit getFrameNumber getProcessId getReferenceBit}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      bytestring-0.10.8.2@bytestring-0.10.8.2-JrBl2bzq1s1LVTP06z4zsD*
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      directory-1.3.0.0@directory-1.3.0.0-LydyXJ0ghFy2oXgCloUCEl
                      filepath-1.4.1.1@filepath-1.4.1.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 time-1.6.0.1@time-1.6.0.1
                      unix-2.7.2.1@unix-2.7.2.1-5U4A6JAsrZe8JNQewKQDBG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  bytestring-0.10.8.2@bytestring-0.10.8.2-JrBl2bzq1s1LVTP06z4zsD:Data.ByteString.Lazy 4ea7da0f2ada75189e7d3360a9572570
import  -/  bytestring-0.10.8.2@bytestring-0.10.8.2-JrBl2bzq1s1LVTP06z4zsD:Data.ByteString.Lazy.Char8 93ed793e659474e5bc2826c2d18bd41c
import  -/  bytestring-0.10.8.2@bytestring-0.10.8.2-JrBl2bzq1s1LVTP06z4zsD:Data.ByteString.Lazy.Internal 7fbc8f6b7284b5367c95796961e61435
import  -/  directory-1.3.0.0@directory-1.3.0.0-LydyXJ0ghFy2oXgCloUCEl:System.Directory b5b657ea84f163d34bac8e331f285be2
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
12e3471242194fe04904166f9cb49088
  $fShowBoolNum :: GHC.Show.Show Main.BoolNum
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.BoolNum
                  Main.$fShowBoolNum_$cshowsPrec
                  Main.$fShowBoolNum_$cshow
                  Main.$fShowBoolNum_$cshowList -}
12e3471242194fe04904166f9cb49088
  $fShowBoolNum1 :: Main.BoolNum -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.BoolNum) (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Main.Zero
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBoolNum3)
                        eta
                   Main.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBoolNum2)
                        eta }) -}
eac6ef616a7b821b1392d7b9d6124b5c
  $fShowBoolNum2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "One"#) -}
309a33af9bfd468e87d7b8929750a656
  $fShowBoolNum3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Zero"#) -}
12e3471242194fe04904166f9cb49088
  $fShowBoolNum_$cshow :: Main.BoolNum -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.BoolNum) ->
                 case x of wild {
                   Main.Zero -> Main.$fShowBoolNum3
                   Main.One -> Main.$fShowBoolNum2 }) -}
12e3471242194fe04904166f9cb49088
  $fShowBoolNum_$cshowList :: [Main.BoolNum] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.BoolNum
                   Main.$fShowBoolNum1) -}
12e3471242194fe04904166f9cb49088
  $fShowBoolNum_$cshowsPrec ::
    GHC.Types.Int -> Main.BoolNum -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Main.BoolNum)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Main.Zero
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBoolNum3)
                        eta
                   Main.One
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Main.$fShowBoolNum2)
                        eta }) -}
c0d1b3dc0b55df26258fc4b205cea891
  $fShowInstruction :: GHC.Show.Show Main.Instruction
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Instruction
                  Main.$fShowInstruction_$cshowsPrec
                  Main.$fShowInstruction_$cshow
                  Main.$fShowInstruction_$cshowList -}
c0d1b3dc0b55df26258fc4b205cea891
  $fShowInstruction1 :: Main.Instruction -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Instruction) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Instruction ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 w1 }) -}
f9618112d1e03d1e34d3602e615534cc
  $fShowInstruction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
d45ccca24c9e722d46499dc3b17844b1
  $fShowInstruction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getDirtyBit = "#) -}
6313fb11bfc39a09c20175402c2475b8
  $fShowInstruction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getReferenceBit = "#) -}
8e94ea636c52bd4b2dc571c1a2258818
  $fShowInstruction5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getFrameNumber = "#) -}
b4146b8381a6f5e5734accd469fcdb29
  $fShowInstruction6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
e3c17f206f07639c3467f0a5c7c88d69
  $fShowInstruction7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "getProcessId = "#) -}
4eaf7fe31350ca42f18dcbc2bb4c7e99
  $fShowInstruction8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Instruction {"#) -}
c0d1b3dc0b55df26258fc4b205cea891
  $fShowInstruction_$cshow :: Main.Instruction -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Instruction) ->
                 Main.$fShowInstruction_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c0d1b3dc0b55df26258fc4b205cea891
  $fShowInstruction_$cshowList ::
    [Main.Instruction] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Instruction
                   Main.$fShowInstruction1) -}
c0d1b3dc0b55df26258fc4b205cea891
  $fShowInstruction_$cshowsPrec ::
    GHC.Types.Int -> Main.Instruction -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(U,U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Instruction)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Instruction ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 w2 } }) -}
4e457c2cc457ae0545ad518b7b722b21
  $s$fShow[]_$s$fShow[]_$cshow ::
    [Main.Instruction] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Main.Instruction]) ->
                 Main.$fShowInstruction_$cshowList
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e15466a14f0a901b74414a7e46e73549
  $tc'Instruction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11008956597147578533##
                   13974787582216245509##
                   Main.$trModule
                   Main.$tc'Instruction1) -}
3efe22dfd311a6c789f3f386c3e16aff
  $tc'Instruction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Instruction"#) -}
6db0439d794bfbb91b3619f071b2d339
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12032748691208660560##
                   9166101802491659799##
                   Main.$trModule
                   Main.$tc'One1) -}
34ea78d659753264650d6e853a3a2a22
  $tc'One1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'One"#) -}
8c745fcf8bd69c9f37ab4573d9b9556f
  $tc'Zero :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10239003622784744441##
                   9125546830836649014##
                   Main.$trModule
                   Main.$tc'Zero1) -}
e15f00dda72349f44f1370f4fd682e9c
  $tc'Zero1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Zero"#) -}
6af77f5a18d2213467316251c9458c24
  $tcBoolNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   396228042253303329##
                   10070783633476318276##
                   Main.$trModule
                   Main.$tcBoolNum1) -}
f6e43d69e8156d25cf3d0102fd068488
  $tcBoolNum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoolNum"#) -}
66b07090ff12c687b58fbd90012ae929
  $tcInstruction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10577447619535976452##
                   1252331337791759708##
                   Main.$trModule
                   Main.$tcInstruction1) -}
2813e99151d514f7a817638938be9c1f
  $tcInstruction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Instruction"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8c0d2b6a395b3737d2254bcdc9843bb0
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Main.BoolNum
    -> Main.BoolNum
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6, Strictness: <S,U><L,U><L,U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Integer.Type.Integer)
                   (ww3 :: Main.BoolNum)
                   (ww4 :: Main.BoolNum)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowInstruction8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Main.$fShowInstruction7
                          (case GHC.Show.$w$cshowsPrec1
                                  0#
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     Main.$fShowInstruction6
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Main.$fShowInstruction5
                                        (case GHC.Show.$w$cshowsPrec1
                                                0#
                                                ww2
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   Main.$fShowInstruction6
                                                   (GHC.Base.++
                                                      @ GHC.Types.Char
                                                      Main.$fShowInstruction4
                                                      (let {
                                                         eta :: GHC.Base.String
                                                         = GHC.Base.++
                                                             @ GHC.Types.Char
                                                             Main.$fShowInstruction6
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Main.$fShowInstruction3
                                                                (case ww4 of wild {
                                                                   Main.Zero
                                                                   -> GHC.Base.++
                                                                        @ GHC.Types.Char
                                                                        Main.$fShowBoolNum3
                                                                        (GHC.Base.++
                                                                           @ GHC.Types.Char
                                                                           Main.$fShowInstruction2
                                                                           x)
                                                                   Main.One
                                                                   -> GHC.Base.++
                                                                        @ GHC.Types.Char
                                                                        Main.$fShowBoolNum2
                                                                        (GHC.Base.++
                                                                           @ GHC.Types.Char
                                                                           Main.$fShowInstruction2
                                                                           x) }))
                                                       } in
                                                       case ww3 of wild {
                                                         Main.Zero
                                                         -> GHC.Base.++
                                                              @ GHC.Types.Char
                                                              Main.$fShowBoolNum3
                                                              eta
                                                         Main.One
                                                         -> GHC.Base.++
                                                              @ GHC.Types.Char
                                                              Main.$fShowBoolNum2
                                                              eta }))) of ww5 { (#,#) ww6 ww7 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww6
                                           ww7 }))) of ww5 { (#,#) ww6 ww7 ->
                           GHC.Types.: @ GHC.Types.Char ww6 ww7 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
b267524390c6de3bfc5778f4a8c3bc9c
  $wlvl ::
    Data.ByteString.Lazy.Internal.ByteString
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
          Main.BoolNum, Main.BoolNum #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.ByteString.Lazy.Internal.ByteString) ->
                 Main.$wtoInstruction
                   (case w of wild {
                      Data.ByteString.Lazy.Internal.Empty
                      -> GHC.Types.[] @ Data.ByteString.Lazy.Internal.ByteString
                      Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs0
                      -> case dt3 of ds2 {
                           DEFAULT
                           -> letrec {
                                $wloop :: GHC.Prim.Int# -> [Data.ByteString.Internal.ByteString]
                                  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                = \ (ww :: GHC.Prim.Int#) ->
                                  case {__pkg_ccall bytestring-0.10.8.2@bytestring-0.10.8.2-JrBl2bzq1s1LVTP06z4zsD memchr GHC.Prim.Addr#
                                                                                                                          -> GHC.Prim.Int#
                                                                                                                          -> GHC.Prim.Word#
                                                                                                                          -> GHC.Prim.State#
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                          -> (# GHC.Prim.State#
                                                                                                                                  GHC.Prim.RealWorld,
                                                                                                                                GHC.Prim.Addr# #)}
                                         (GHC.Prim.plusAddr# dt (GHC.Prim.+# dt2 ww))
                                         32#
                                         (GHC.Prim.int2Word# (GHC.Prim.-# ds2 ww))
                                         GHC.Prim.realWorld# of wild1 { (#,#) ds4 ds5 ->
                                  case GHC.Prim.touch#
                                         @ 'GHC.Types.PtrRepLifted
                                         @ GHC.ForeignPtr.ForeignPtrContents
                                         dt1
                                         ds4 of s' { DEFAULT ->
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.eqAddr# ds5 __NULL) of wild2 {
                                    GHC.Types.False
                                    -> let {
                                         i :: GHC.Types.Int
                                         = case GHC.Prim.touch#
                                                  @ 'GHC.Types.PtrRepLifted
                                                  @ GHC.ForeignPtr.ForeignPtrContents
                                                  dt1
                                                  GHC.Prim.realWorld# of s'1 { DEFAULT ->
                                           GHC.Types.I#
                                             (GHC.Prim.minusAddr# ds5 (GHC.Prim.plusAddr# dt dt2)) }
                                       } in
                                       GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         (case i of wild4 { GHC.Types.I# x ->
                                          Data.ByteString.Internal.PS
                                            dt
                                            dt1
                                            (GHC.Prim.+# dt2 ww)
                                            (GHC.Prim.-# x ww) })
                                         (case i of wild4 { GHC.Types.I# x ->
                                          $wloop (GHC.Prim.+# x 1#) })
                                    GHC.Types.True
                                    -> GHC.Types.:
                                         @ Data.ByteString.Internal.ByteString
                                         (Data.ByteString.Internal.PS
                                            dt
                                            dt1
                                            (GHC.Prim.+# dt2 ww)
                                            (GHC.Prim.-# ds2 ww))
                                         (GHC.Types.[] @ Data.ByteString.Internal.ByteString) } } }
                              } in
                              Main.main_comb
                                (GHC.Types.[] @ Data.ByteString.Internal.ByteString)
                                ($wloop 0#)
                                cs0
                           0#
                           -> Main.main_comb
                                (GHC.Types.[] @ Data.ByteString.Internal.ByteString)
                                (GHC.Types.[] @ Data.ByteString.Internal.ByteString)
                                cs0 } })) -}
d1b01f24e12de3ae896da7a5cc728fe5
  $wtoInstruction ::
    [Data.ByteString.Lazy.Internal.ByteString]
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer,
          Main.BoolNum, Main.BoolNum #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Data.ByteString.Lazy.Internal.ByteString]) ->
                 let {
                   ds :: ([GHC.Types.Char], [GHC.Types.Char], [GHC.Types.Char],
                          [GHC.Types.Char])
                   = case GHC.Base.map
                            @ Data.ByteString.Lazy.Internal.ByteString
                            @ [GHC.Types.Char]
                            Data.ByteString.Lazy.Internal.unpackChars
                            w of wild {
                       [] -> Main.main8
                       : idProcess ds1
                       -> case ds1 of wild1 {
                            [] -> Main.main8
                            : frameNumber ds2
                            -> case ds2 of wild2 {
                                 [] -> Main.main8
                                 : refBit ds3
                                 -> case ds3 of wild3 {
                                      [] -> Main.main8
                                      : dirtyBit ds4
                                      -> case ds4 of wild4 {
                                           [] -> (idProcess, frameNumber, refBit, dirtyBit)
                                           : ipv ipv1 -> Main.main8 } } } } }
                 } in
                 (# case Text.Read.readEither6
                           @ GHC.Integer.Type.Integer
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Integer.Type.Integer
                              Main.main7
                              (case ds of ds1 { (,,,) idProcess frameNumber refBit dirtyBit ->
                               idProcess })) of wild {
                      [] -> Main.main6
                      : x ds1
                      -> case ds1 of wild1 { [] -> x : ipv ipv1 -> Main.main5 } },
                    case Text.Read.readEither6
                           @ GHC.Integer.Type.Integer
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Integer.Type.Integer
                              Main.main7
                              (case ds of ds1 { (,,,) idProcess frameNumber refBit dirtyBit ->
                               frameNumber })) of wild {
                      [] -> Main.main6
                      : x ds1
                      -> case ds1 of wild1 { [] -> x : ipv ipv1 -> Main.main5 } },
                    Main.One,
                    case ds of ds1 { (,,,) idProcess frameNumber refBit dirtyBit ->
                    case GHC.Base.eqString dirtyBit Main.main4 of wild {
                      GHC.Types.False -> Main.Zero GHC.Types.True -> Main.One } } #)) -}
12e3471242194fe04904166f9cb49088
  data BoolNum = Zero | One
c0d1b3dc0b55df26258fc4b205cea891
  data Instruction
    = Instruction {getProcessId :: GHC.Integer.Type.Integer,
                   getFrameNumber :: GHC.Integer.Type.Integer,
                   getReferenceBit :: Main.BoolNum,
                   getDirtyBit :: Main.BoolNum}
c4c549e0d499285f26543c38c04e061d
  getDirtyBit :: Main.Instruction -> Main.BoolNum
  RecSel Left Main.Instruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Instruction) ->
                 case ds of wild { Main.Instruction ds1 ds2 ds3 ds4 -> ds4 }) -}
51ad4c6791f2ff2c4084069538ea9e38
  getFrameNumber :: Main.Instruction -> GHC.Integer.Type.Integer
  RecSel Left Main.Instruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Instruction) ->
                 case ds of wild { Main.Instruction ds1 ds2 ds3 ds4 -> ds2 }) -}
c72000d8a3d2aa70803250382a8c6362
  getProcessId :: Main.Instruction -> GHC.Integer.Type.Integer
  RecSel Left Main.Instruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Instruction) ->
                 case ds of wild { Main.Instruction ds1 ds2 ds3 ds4 -> ds1 }) -}
4c20273db5b4e77ec0b45b3a0050d459
  getReferenceBit :: Main.Instruction -> Main.BoolNum
  RecSel Left Main.Instruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Instruction) ->
                 case ds of wild { Main.Instruction ds1 ds2 ds3 ds4 -> ds3 }) -}
8052fe7587f57be1c580021bdd4bb46c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2bb1c5e045553c10e91bd68c93248fbb
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case Main.main2
                        (GHC.List.$w!! @ GHC.Base.String ipv1 0#)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (Main.$s$fShow[]_$s$fShow[]_$cshow ipv3)
                   GHC.Types.True
                   ipv2 } }) -}
6faa7a76f263c2f2358c53a205e8a3db
  main10 :: GHC.Types.IO GHC.IO.FilePath
  {- Unfolding: (GHC.Magic.lazy
                   @ (GHC.Types.IO GHC.IO.FilePath)
                   System.Directory.getCurrentDirectory2
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R))) -}
c4ab4eea0d23411afdaa6b7bcb22e4d3
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4d984d6cb885f60e0d90d10a156f6e6a
  main2 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.Instruction] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fileName :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.catch#
                        @ GHC.IO.FilePath
                        @ GHC.Exception.SomeException
                        Main.main10 `cast` (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)
                        Main.main9
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString# "/src/"# fileName))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case ipv5 of wild {
                      Data.ByteString.Lazy.Internal.Empty
                      -> GHC.Types.[] @ Main.Instruction
                      Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 cs0
                      -> GHC.Base.map
                           @ Data.ByteString.Lazy.Internal.ByteString
                           @ Main.Instruction
                           Main.main3
                           (Data.ByteString.Lazy.Char8.$wloop0
                              dt
                              dt1
                              dt2
                              dt3
                              cs0) } #) } } }) -}
dc2dc86759cf55c6805639e9838cb7fc
  main3 ::
    Data.ByteString.Lazy.Internal.ByteString -> Main.Instruction
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.ByteString.Lazy.Internal.ByteString) ->
                 case Main.$wlvl w of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Main.Instruction ww1 ww2 ww3 ww4 }) -}
be43a9ff2a1a900bc6e89085ff06ca35
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "W"#) -}
1f297fcab70b18bf0753247b959c7a78
  main5 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
c20c8cdd67335285bdc0ce2f0bec92f4
  main6 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
95ebdff66326eb180aaa8180a5af56ec
  main7 :: Text.ParserCombinators.ReadP.P GHC.Integer.Type.Integer
  {- Unfolding: (GHC.Read.$fReadInteger3
                   GHC.Read.$fReadInteger_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Integer.Type.Integer
                   (Text.Read.readEither5 @ GHC.Integer.Type.Integer)) -}
ccbd1b582161d67a572a39da1a87053f
  main8 ::
    ([GHC.Types.Char], [GHC.Types.Char], [GHC.Types.Char],
     [GHC.Types.Char])
  {- Strictness: x -}
c4ce67b4dfe305d4f3ecba1118673d30
  main9 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 2, Strictness: <L,U><L,U>x -}
c1d13c9130000a74ed2e6b101da042cd
  main_comb ::
    [Data.ByteString.Internal.ByteString]
    -> [Data.ByteString.Internal.ByteString]
    -> Data.ByteString.Lazy.Internal.ByteString
    -> [Data.ByteString.Lazy.Internal.ByteString]
  {- Arity: 3, Strictness: <L,U><S,1*U><L,1*U> -}
682ded9331ec5c3165020e0c8cee701c
  readData :: GHC.Base.String -> GHC.Types.IO [Main.Instruction]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main2
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[Main.Instruction]>_R)) -}
47ed3acc33ce7cf069114831da6e7c50
  toInstruction ::
    [Data.ByteString.Lazy.Internal.ByteString] -> Main.Instruction
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Data.ByteString.Lazy.Internal.ByteString]) ->
                 case Main.$wtoInstruction w of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 Main.Instruction ww1 ww2 ww3 ww4 }) -}
instance [safe] GHC.Show.Show [Main.BoolNum] = Main.$fShowBoolNum
instance [safe] GHC.Show.Show [Main.Instruction]
  = Main.$fShowInstruction
"SPEC/Main $fShow[]_$cshow @ Instruction" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       Main.Instruction)
  GHC.Show.$fShow[]_$cshow @ Main.Instruction $dShow
  = Main.$s$fShow[]_$s$fShow[]_$cshow
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

